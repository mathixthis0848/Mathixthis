<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            display: flex;
            flex-direction: column; /* Pour aligner les éléments verticalement */
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #000;
            color: #fff;
        }

        /* Styles pour le conteneur de photos */
        #photo-container {
            width: 500px;
            height: 500px;
            overflow: hidden;
            position: relative;
            border: 10px solid #82ccaa;
            border-radius: 15px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            margin-bottom: 20px; /* Ajoute un espace en bas du conteneur */
        }

        #photo-list {
            display: flex;
            transition: transform 1s ease-in-out;
        }

        .photo {
            width: 500px;
            height: 500px;
            flex-shrink: 0;
        }

        /* Styles pour les boutons de navigation */
        #prev-btn, #next-btn, #vote-btn {
            position: absolute;
            cursor: pointer;
            font-size: 18px;
            border: none;
            border-radius: 5px;
            outline: none;
        }

        #prev-btn, #next-btn {
            top: 50%;
            color: #fff;
            padding: 8px 12px;
            background-color: #82ccaa;
        }

        #prev-btn:hover, #next-btn:hover {
            background-color: #5a9c7e;
        }

        #prev-btn {
            left: 10px;
        }

        #next-btn {
            right: 10px;
        }

        #vote-btn {
            bottom: 20px; /* Placer le bouton en bas */
            left: 50%;
            transform: translateX(-50%);
            color: #fff;
            padding: 10px 20px;
            background-color: #82ccaa;
        }

        #vote-btn:hover {
            background-color: #5a9c7e;
        }

        /* Styles pour le modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #000;
            padding: 20px;
            border-radius: 10px;
        }

        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            color: #fff;
            cursor: pointer;
        }

        /* Style pour l'élément input de type fichier */
        #file-input {
            position: absolute;
            bottom: 50px; /* Placer l'élément en bas */
            left: 50%;
            transform: translateX(-50%);
        }
    </style>
</head>
<body>
    <div id="photo-container">
        <div id="photo-list">
            <!-- Images ici -->
        </div>
        <button id="prev-btn" onclick="prevPhoto()">Précédente</button>
        <button id="next-btn" onclick="nextPhoto()">Suivante</button>
        <button id="vote-btn" onclick="showVoteOptions()">Voter pour cette photo</button>
    </div>
    <!-- Input type file ici -->
    <input type="file" id="file-input" accept="image/*" multiple>
    
    <div id="vote-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeVoteModal()">&times;</span>
            <h2>Choisissez une personne</h2>
            <select id="vote-options">
                <option value="la personne 1">Personne 1</option>
                <option value="la personne 2">Personne 2</option>
                <option value="la personne 3">Personne 3</option>
            </select>
            <button onclick="vote()">Voter</button>
        </div>
    </div>


    <script>
    // Récupérer l'élément contenant les photos
    const photoContainer = document.getElementById('photo-container');
    // Récupérer la liste des photos
    const photoList = document.getElementById('photo-list');
    // Récupérer le bouton précédent
    const prevBtn = document.getElementById('prev-btn');
    // Récupérer le bouton suivant
    const nextBtn = document.getElementById('next-btn');
    // Récupérer le bouton de vote
    const voteBtn = document.getElementById('vote-btn');
    
    // Récupérer l'élément d'entrée de fichier
    const fileInput = document.getElementById('file-input');

    // Écouter les changements dans l'entrée de fichier
    fileInput.addEventListener('change', handleFiles);

    // Fonction pour gérer les fichiers sélectionnés
    function handleFiles() {
        const files = fileInput.files; // Récupérer les fichiers sélectionnés
        const photoList = document.getElementById('photo-list');

        // Supprimer toutes les images existantes dans la liste de photos
        while (photoList.firstChild) {
            photoList.removeChild(photoList.firstChild);
        }

        // Parcourir les fichiers et les ajouter comme des éléments img dans la liste de photos
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
    
            // Lorsque le lecteur termine la lecture du fichier
            reader.onload = function(event) {
                const img = new Image();
                img.src = event.target.result; // Définit la source de l'image comme l'URL des données du fichier
                img.alt = file.name; // Utilise le nom du fichier comme attribut alt
                img.classList.add('photo'); // Ajoute la classe photo à l'image

                // Ajoute l'image à la liste de photos
                photoList.appendChild(img);
            };

            // Lire le fichier en tant que URL de données
            reader.readAsDataURL(file);
        }

        // Réinitialiser l'indice de la photo actuellement affichée
        currentIndex = 0;
        // Mettre à jour l'affichage de la liste de photos
        updatePhotoList();
}



        // Variable pour suivre l'indice de la photo actuellement affichée
        let currentIndex = 0;

        // Fonction pour afficher la photo précédente
        function prevPhoto() {
            currentIndex = (currentIndex - 1 + photoList.children.length) % photoList.children.length;
            updatePhotoList();
        }

        // Fonction pour afficher la photo suivante
        function nextPhoto() {
            currentIndex = (currentIndex + 1) % photoList.children.length;
        updatePhotoList();
        }
    
        // Fonction pour mettre à jour l'affichage de la liste de photos
        function updatePhotoList() {
            const newPosition = -currentIndex * photoContainer.clientWidth;
            photoList.style.transform = `translateX(${newPosition}px)`;
        }

        // Fonction pour afficher les options de vote
        function showVoteOptions() {
            // Afficher la boîte de dialogue (modal) pour le vote
            document.getElementById('vote-modal').style.display = 'block';
            // Masquer le bouton "Voter pour cette photo"
            document.getElementById('vote-btn').style.display = 'none';
        }

        // Fonction pour fermer la boîte de dialogue modale de vote
        function closeVoteModal() {
            // Fermer la boîte de dialogue (modal) pour le vote
            document.getElementById('vote-modal').style.display = 'none';
            // Afficher à nouveau le bouton "Voter pour cette photo"
            document.getElementById('vote-btn').style.display = 'block';
        }

        // Fonction pour gérer le vote
        // Fonction pour gérer le vote
    function vote() {
        // Récupérer l'option sélectionnée dans le menu déroulant
        const selectedOption = document.getElementById('vote-options').value;
        // Afficher un message indiquant que l'utilisateur a voté
        alert("Vous avez voté pour " + selectedOption);
    }
    
    
    

</script>
</body>
</html>





# PROF CLIENT CHAT
# -*- coding: utf-8 -*- 
import socket

def start_client():
    # Créer un socket IPv4 et TCP
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connexion au serveur
    server_address = ("127.0.0.1", 2948)  # Adresse IP et port du serveur
    client_socket.connect(server_address)

    try:
        # Boucle pour envoyer et recevoir des messages
        while True:
            # Envoyer un message au serveur
            message = input("You: ")
            client_socket.send(message.encode('utf-8'))

            # Recevoir la réponse du serveur
            response = client_socket.recv(1024)
            print("Server says:", response.decode('utf-8'))

    except KeyboardInterrupt:
        print("Closing connection.")
        client_socket.close()

if __name__ == "__main__":
    start_client()

    
    
# PROF SERV CHAT
# -*- coding: utf-8 -*-
import socket

def handle_client(client_socket):
    while True:
        try:
            # Recevoir les données du client
            data = client_socket.recv(1024)
            if not data:
                print("Client disconnected")
                # Envoyer un message au client pour indiquer qu'il est déconnecté
                client_socket.send("Vous êtes déconnecté.".encode('utf-8'))
                break

            # Afficher les données reçues
            print("Client says:", data.decode('utf-8'))

            # Envoyer une réponse
            response = input("You: ")
            client_socket.send(response.encode('utf-8'))
        except Exception as e:
            print("Erreur:", e)
            break

    # Fermer la connexion avec le client
    client_socket.close()

def start_server():
    # Créer un socket IPv4 et TCP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Lier le socket à une adresse et un port dynamique (supérieur à 49152)
    server_socket.bind(("127.0.0.1", 2948))

    # Écouter les connexions entrantes
    server_socket.listen(5)
    print("Server listening on port 2948")
    print("Communiquer l'adresse du serveur au client :", "127.0.0.1")

    while True:
        # Accepter la connexion du client
        client_socket, addr = server_socket.accept()
        print("Accepted connection from {}".format(addr))

        # Gérer le client
        handle_client(client_socket)

if __name__ == "__main__":
    start_server()

